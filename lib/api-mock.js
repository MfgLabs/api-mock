// Generated by CoffeeScript 1.12.4
var ApiMock, CorsSupport, SslSupport, express, fs, protagonist, walker;

fs = require('fs');

protagonist = require('protagonist');

express = require('express');

walker = require('./walker');

SslSupport = require('./ssl-support');

CorsSupport = require('./cors-support');

ApiMock = (function() {
  function ApiMock(config) {
    var corsSupport, sslSupport;
    if (config['protagonist']) {
      protagonist = config['protagonist'];
    }
    if (config['express']) {
      express = config['express'];
    }
    if (config['blueprintPath']) {
      this.blueprintPath = config['blueprintPath'];
    }
    if (this.blueprintPath == null) {
      throw new Error("No blueprint path provided.");
    }
    this.configuration = config;
    this.app = express();
    if (this.configuration.options['ssl-enable']) {
      sslSupport = new SslSupport(this.app, {
        port: this.configuration.options['ssl-port'],
        host: this.configuration.options['ssl-host'],
        cert: this.configuration.options['ssl-cert'],
        key: this.configuration.options['ssl-key']
      });
    }
    if (!this.configuration.options['cors-disable']) {
      corsSupport = new CorsSupport(this.app);
    }
  }

  ApiMock.prototype.run = function() {
    var app, ast_json, data, e;
    app = this.app;
    try {
      data = fs.readFileSync(this.blueprintPath, 'utf8');
    } catch (error1) {
      e = error1;
      throw e;
    }
    ast_json = "";
    return protagonist.parse(data, {
      type: "ast"
    }, (function(_this) {
      return function(error, result) {
        var ref, ref1;
        if (error != null) {
          throw error;
        }
        ast_json = result.ast;
        try {
          walker(app, ast_json['resourceGroups']);
        } catch (error1) {
          error = error1;
          throw error;
        }
        try {
          return app.listen(((ref = _this.configuration) != null ? (ref1 = ref.options) != null ? ref1.port : void 0 : void 0) != null ? _this.configuration.options.port : 3000);
        } catch (error1) {
          error = error1;
        }
      };
    })(this));
  };

  return ApiMock;

})();

module.exports = ApiMock;
